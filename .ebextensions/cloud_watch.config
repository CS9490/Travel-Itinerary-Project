option_settings:
  aws:elasticbeanstalk:application:environment:

#Part# 1:
#Since I have not deploy cloud successfully, but the things for understanding how the server responds to HTTP requests are showing below.

resources:
  CloudWatchMetrics:
    # Metric for 2xx Responses
    HttpCodesMetric2xx:
      Type: "AWS::CloudWatch::MetricFilter"
      Properties:
        LogGroupName: "/aws/elasticbeanstalk/travel_itinerary_app/var/log/httpd/access_log"
        FilterPattern: "[ip, identity, user_id, timestamp, request, status_code=2*, size, referer, user_agent]"
        MetricTransformations:
          - MetricName: Http2xxResponses
            MetricNamespace: "travel_itinerary_app/HttpMetrics"
            MetricValue: "1"

    # Metric for 3xx Responses
    HttpCodesMetric3xx:
      Type: "AWS::CloudWatch::MetricFilter"
      Properties:
        LogGroupName: "/aws/elasticbeanstalk/travel_itinerary_app/var/log/httpd/access_log"
        FilterPattern: "[ip, identity, user_id, timestamp, request, status_code=3*, size, referer, user_agent]"
        MetricTransformations:
          - MetricName: Http3xxResponses
            MetricNamespace: "travel_itinerary_app/HttpMetrics"
            MetricValue: "1"

    # Metric for 4xx Responses
    HttpCodesMetric4xx:
      Type: "AWS::CloudWatch::MetricFilter"
      Properties:
        LogGroupName: "/aws/elasticbeanstalk/travel_itinerary_app/var/log/httpd/access_log"
        FilterPattern: "[ip, identity, user_id, timestamp, request, status_code=4*, size, referer, user_agent]"
        MetricTransformations:
          - MetricName: Http4xxResponses
            MetricNamespace: "travel_itinerary_app/HttpMetrics"
            MetricValue: "1"

    # Metric for 5xx Responses
    HttpCodesMetric5xx:
      Type: "AWS::CloudWatch::MetricFilter"
      Properties:
        LogGroupName: "/aws/elasticbeanstalk/travel_itinerary_app/var/log/httpd/access_log"
        FilterPattern: "[ip, identity, user_id, timestamp, request, status_code=5*, size, referer, user_agent]"
        MetricTransformations:
          - MetricName: Http5xxResponses
            MetricNamespace: "travel_itinerary_app/HttpMetrics"
            MetricValue: "1"

#part 2: Instance states.

resources:
  cloudwatch-alarms:
    high-cpu-alarm:
      Type: "AWS::CloudWatch::Alarm"
      Properties:
        AlarmDescription: "Alarm if CPU too high or instance appears down"
        Namespace: "AWS/EC2"
        MetricName: "CPUUtilization"
        Dimensions:
          - Name: "InstanceId"                  # I don't have an InstanceId so far.
            Value: {"Ref" : "AWS::InstanceId"}  # I don't have an InstanceId so far.
        Statistic: Average
        Period: "300"                           # 5mins = 300seconds
        EvaluationPeriods: "1"
        Threshold: "70"                         # The alarm to trigger when CPU utilization exceeds 70%.
        ComparisonOperator: "GreaterThanThreshold"
        AlarmActions: 
          - "arn:aws:sns:your-region:your-account-id:your-sns-topic"

# Part#3: For this part, To monitor the p95, p99, and p99.9 percentiles are done in AWS CloudWatch console.

resources:
  # Custom CloudWatch metric filters and alarms
  CloudWatchMetrics:
    # Request Latency Metric Filter
    RequestLatencyMetric:
      Type: "AWS::CloudWatch::MetricFilter"
      Properties:
        LogGroupName: "/aws/elasticbeanstalk/travel_itinerary_app/var/log/log-file" 
        FilterPattern: "[ip, id, user, timestamp, request, status_code, size, latency]"
        MetricTransformations:
          - MetricName: RequestLatency
            MetricNamespace: "travel_itinerary_app/LatencyMetrics"
            MetricValue: "$latency"

